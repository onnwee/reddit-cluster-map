// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package db

import (
	"context"
	"database/sql"
)

const getCommentsByPost = `-- name: GetCommentsByPost :many
SELECT id, post_id, author, subreddit, parent_id, body, created_at, score, last_seen, depth FROM comments WHERE post_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetCommentsByPost(ctx context.Context, postID string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Author,
			&i.Subreddit,
			&i.ParentID,
			&i.Body,
			&i.CreatedAt,
			&i.Score,
			&i.LastSeen,
			&i.Depth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByUser = `-- name: GetCommentsByUser :many
SELECT id, post_id, author, subreddit, parent_id, body, created_at, score, last_seen, depth FROM comments WHERE author = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetCommentsByUserParams struct {
	Author string
	Limit  int32
	Offset int32
}

func (q *Queries) GetCommentsByUser(ctx context.Context, arg GetCommentsByUserParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByUser, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Author,
			&i.Subreddit,
			&i.ParentID,
			&i.Body,
			&i.CreatedAt,
			&i.Score,
			&i.LastSeen,
			&i.Depth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertComment = `-- name: InsertComment :exec
INSERT INTO comments (id, post_id, subreddit, author, body, created_at, parent_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (id) DO NOTHING
`

type InsertCommentParams struct {
	ID        string
	PostID    string
	Subreddit string
	Author    string
	Body      sql.NullString
	CreatedAt sql.NullTime
	ParentID  sql.NullString
}

func (q *Queries) InsertComment(ctx context.Context, arg InsertCommentParams) error {
	_, err := q.db.ExecContext(ctx, insertComment,
		arg.ID,
		arg.PostID,
		arg.Subreddit,
		arg.Author,
		arg.Body,
		arg.CreatedAt,
		arg.ParentID,
	)
	return err
}

const listComments = `-- name: ListComments :many
SELECT id, post_id, author, subreddit, parent_id, body, created_at, score, last_seen, depth FROM comments ORDER BY created_at DESC LIMIT 100
`

func (q *Queries) ListComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Author,
			&i.Subreddit,
			&i.ParentID,
			&i.Body,
			&i.CreatedAt,
			&i.Score,
			&i.LastSeen,
			&i.Depth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertComment = `-- name: UpsertComment :exec
INSERT INTO comments (id, post_id, author, subreddit, body, parent_id, depth)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (id) DO UPDATE
SET
  body = EXCLUDED.body,
  parent_id = EXCLUDED.parent_id,
  depth = EXCLUDED.depth
`

type UpsertCommentParams struct {
	ID        string
	PostID    string
	Author    string
	Subreddit string
	Body      sql.NullString
	ParentID  sql.NullString
	Depth     sql.NullInt32
}

func (q *Queries) UpsertComment(ctx context.Context, arg UpsertCommentParams) error {
	_, err := q.db.ExecContext(ctx, upsertComment,
		arg.ID,
		arg.PostID,
		arg.Author,
		arg.Subreddit,
		arg.Body,
		arg.ParentID,
		arg.Depth,
	)
	return err
}
