// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: graph.sql

package db

import (
	"context"
	"database/sql"
)

const bulkInsertGraphLink = `-- name: BulkInsertGraphLink :exec
INSERT INTO graph_links (source, target)
VALUES ($1, $2)
`

type BulkInsertGraphLinkParams struct {
	Source string
	Target string
}

func (q *Queries) BulkInsertGraphLink(ctx context.Context, arg BulkInsertGraphLinkParams) error {
	_, err := q.db.ExecContext(ctx, bulkInsertGraphLink, arg.Source, arg.Target)
	return err
}

const bulkInsertGraphNode = `-- name: BulkInsertGraphNode :exec
INSERT INTO graph_nodes (id, name, val, type)
VALUES ($1, $2, $3, $4)
`

type BulkInsertGraphNodeParams struct {
	ID   string
	Name string
	Val  sql.NullString
	Type sql.NullString
}

func (q *Queries) BulkInsertGraphNode(ctx context.Context, arg BulkInsertGraphNodeParams) error {
	_, err := q.db.ExecContext(ctx, bulkInsertGraphNode,
		arg.ID,
		arg.Name,
		arg.Val,
		arg.Type,
	)
	return err
}

const clearGraphTables = `-- name: ClearGraphTables :exec
TRUNCATE TABLE graph_nodes, graph_links
`

func (q *Queries) ClearGraphTables(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearGraphTables)
	return err
}

const createGraphLink = `-- name: CreateGraphLink :one
INSERT INTO graph_links (
    source,
    target
) VALUES (
    $1, $2
) RETURNING id, source, target, created_at, updated_at
`

type CreateGraphLinkParams struct {
	Source string
	Target string
}

func (q *Queries) CreateGraphLink(ctx context.Context, arg CreateGraphLinkParams) (GraphLink, error) {
	row := q.db.QueryRowContext(ctx, createGraphLink, arg.Source, arg.Target)
	var i GraphLink
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Target,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGraphNode = `-- name: CreateGraphNode :one
INSERT INTO graph_nodes (
    id,
    name,
    val,
    type
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, val, type, created_at, updated_at
`

type CreateGraphNodeParams struct {
	ID   string
	Name string
	Val  sql.NullString
	Type sql.NullString
}

func (q *Queries) CreateGraphNode(ctx context.Context, arg CreateGraphNodeParams) (GraphNode, error) {
	row := q.db.QueryRowContext(ctx, createGraphNode,
		arg.ID,
		arg.Name,
		arg.Val,
		arg.Type,
	)
	var i GraphNode
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Val,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllComments = `-- name: GetAllComments :many
SELECT id, body, score, post_id
FROM comments
`

type GetAllCommentsRow struct {
	ID     string
	Body   sql.NullString
	Score  sql.NullInt32
	PostID string
}

func (q *Queries) GetAllComments(ctx context.Context) ([]GetAllCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCommentsRow
	for rows.Next() {
		var i GetAllCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Score,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, title, score
FROM posts
`

type GetAllPostsRow struct {
	ID    string
	Title sql.NullString
	Score sql.NullInt32
}

func (q *Queries) GetAllPosts(ctx context.Context) ([]GetAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGraphData = `-- name: GetGraphData :many
SELECT 
    'node'::TEXT as data_type,
    id::TEXT as id,
    name,
    val::TEXT as val,
    type
FROM graph_nodes
UNION ALL
SELECT 
    'link'::TEXT as data_type,
    source::TEXT as id,
    target::TEXT as name,
    '1'::TEXT as val,
    'connection'::TEXT as type
FROM graph_links
`

type GetGraphDataRow struct {
	DataType string
	ID       string
	Name     string
	Val      string
	Type     sql.NullString
}

func (q *Queries) GetGraphData(ctx context.Context) ([]GetGraphDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getGraphData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGraphDataRow
	for rows.Next() {
		var i GetGraphDataRow
		if err := rows.Scan(
			&i.DataType,
			&i.ID,
			&i.Name,
			&i.Val,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrecalculatedGraphData = `-- name: GetPrecalculatedGraphData :many
SELECT
    'node' as data_type,
    id,
    name,
    val,
    type,
    NULL as source,
    NULL as target
FROM graph_nodes
UNION ALL
SELECT
    'link' as data_type,
    id::text,
    NULL as name,
    NULL as val,
    NULL as type,
    source,
    target
FROM graph_links
ORDER BY data_type, id
`

type GetPrecalculatedGraphDataRow struct {
	DataType string
	ID       string
	Name     string
	Val      sql.NullString
	Type     sql.NullString
	Source   interface{}
	Target   interface{}
}

func (q *Queries) GetPrecalculatedGraphData(ctx context.Context) ([]GetPrecalculatedGraphDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getPrecalculatedGraphData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPrecalculatedGraphDataRow
	for rows.Next() {
		var i GetPrecalculatedGraphDataRow
		if err := rows.Scan(
			&i.DataType,
			&i.ID,
			&i.Name,
			&i.Val,
			&i.Type,
			&i.Source,
			&i.Target,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
